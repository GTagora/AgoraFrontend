{"kind":"FETCH","data":{"headers":{"alt-svc":"h3=\":443\"; ma=86400","cf-cache-status":"DYNAMIC","cf-ray":"83793f9f8b19c333-EWR","connection":"keep-alive","content-encoding":"br","content-type":"application/json; charset=utf-8","date":"Mon, 18 Dec 2023 17:50:30 GMT","etag":"W/\"6dc4-hI9ErTo0d8bkUjaIxevEYuB2k78\"","rndr-id":"f7e12206-63b9-4154","server":"cloudflare","transfer-encoding":"chunked","vary":"Accept-Encoding","x-powered-by":"Express","x-render-origin-server":"Render"},"body":"","status":200,"url":"https://agora-backend-sxd6.onrender.com/getJournalEntries"},"revalidate":31536000,"tags":[]}