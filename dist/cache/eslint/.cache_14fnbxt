[{"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/[issue]/[article]/page.tsx":"1","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/about/page.tsx":"2","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/about/staff/page.tsx":"3","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/archive/page.tsx":"4","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/blog/page.tsx":"5","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/contact/page.tsx":"6","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(templates)/card.tsx":"7","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/audioControls.tsx":"8","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/audioPlayer.tsx":"9","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/backdrop.tsx":"10","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/footer.tsx":"11","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/hamburger.tsx":"12","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/header.tsx":"13","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/letter.tsx":"14","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/subtitle.tsx":"15","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/error.tsx":"16","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/layout.tsx":"17","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/not-found.tsx":"18","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/page.tsx":"19"},{"size":2390,"mtime":1703264853507,"results":"20","hashOfConfig":"21"},{"size":4887,"mtime":1702920577345,"results":"22","hashOfConfig":"21"},{"size":2022,"mtime":1702920577345,"results":"23","hashOfConfig":"21"},{"size":582,"mtime":1703016154246,"results":"24","hashOfConfig":"21"},{"size":543,"mtime":1702920577346,"results":"25","hashOfConfig":"21"},{"size":2689,"mtime":1702922946450,"results":"26","hashOfConfig":"21"},{"size":1178,"mtime":1703014976860,"results":"27","hashOfConfig":"21"},{"size":1633,"mtime":1703195912895,"results":"28","hashOfConfig":"21"},{"size":4559,"mtime":1703266838451,"results":"29","hashOfConfig":"21"},{"size":354,"mtime":1701927810464,"results":"30","hashOfConfig":"21"},{"size":3194,"mtime":1702920577348,"results":"31","hashOfConfig":"21"},{"size":2217,"mtime":1703181340581,"results":"32","hashOfConfig":"21"},{"size":3582,"mtime":1703016177014,"results":"33","hashOfConfig":"21"},{"size":3861,"mtime":1703013906953,"results":"34","hashOfConfig":"21"},{"size":1338,"mtime":1701386985548,"results":"35","hashOfConfig":"21"},{"size":117,"mtime":1701475161005,"results":"36","hashOfConfig":"21"},{"size":1860,"mtime":1703121070020,"results":"37","hashOfConfig":"21"},{"size":432,"mtime":1701721376994,"results":"38","hashOfConfig":"21"},{"size":4617,"mtime":1703017214722,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rxlese",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/[issue]/[article]/page.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/about/page.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/about/staff/page.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/archive/page.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/blog/page.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(pages)/contact/page.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/(templates)/card.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/audioControls.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/audioPlayer.tsx",["98"],[],"'use client';\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport AudioControls from \"./audioControls\";\nimport Backdrop from \"./backdrop\";\nimport Image from \"next/image\";\nimport styles from \"./audioPlayer.module.css\";\n\nconst AudioPlayer = ({ tracks }: { tracks:any }) => {\n  // State\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Destructure for conciseness\n  const { title, artist, color, image, audioSrc } = tracks[trackIndex];\n\n  // Refs\n  const audioRef = useRef(new Audio(audioSrc));\n  const intervalRef:any = useRef(0);\n  const isReady = useRef(false);\n\n  // Destructure for conciseness\n  const { duration } = audioRef.current;\n\n  const currentPercentage = duration\n    ? `${(trackProgress / duration) * 100}%`\n    : \"0%\";\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n  `;\n\n  const startTimer = useCallback(() => {\n\n    intervalRef.current = setInterval(() => {\n        if (audioRef.current.ended) {\n          setTrackProgress(0);\n        } else {\n          setTrackProgress(audioRef.current.currentTime);\n        }\n        // Clear any timers already running\n        return clearInterval(intervalRef.current);\n    }, 1000);\n\n  }, []); \n\n  const onScrub = (value:any) => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    setTrackProgress(audioRef.current.currentTime);\n  };\n\n  const onScrubEnd = () => {\n    // If not already playing, start\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n    startTimer();\n  };\n\n  const incrementTime = (num:any) => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime += num;\n    setTrackProgress(audioRef.current.currentTime);\n    startTimer();\n  }\n\n  const formatTime = (num:any) => {\n    let min = Math.floor(num/60);\n    return min + \":\" + (\"0\" + Math.round(num%60)).slice(-2);\n  }\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [startTimer, isPlaying]);\n\n  // Handles cleanup and setup when changing tracks\n  // useEffect(() => {\n  //   audioRef.current.pause();\n\n  //   audioRef.current = new Audio(audioSrc);\n  //   setTrackProgress(audioRef.current.currentTime);\n\n  //   if (isReady.current) {\n  //     audioRef.current.play();\n  //     setIsPlaying(true);\n  //     startTimer();\n  //   } else {\n  //     // Set the isReady ref as true for the next pass\n  //     isReady.current = true;\n  //   }\n  // }, [audioSrc, startTimer, trackIndex]);\n\n  useEffect(() => {\n    // Pause and clean up on unmount\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  return (\n    <div className={styles['audio-player']}>\n      <div className={styles['track-info']}>\n        <Image className={styles.artwork} src={image} height={400} width={400} alt='Article Image'/>\n        <h2 className={styles.title}>{title}</h2>\n        <h3 className={styles.artist}>{artist}</h3>\n        <AudioControls\n          isPlaying={isPlaying}\n          incrementTime={incrementTime}\n          onPlayPauseClick={setIsPlaying}\n        />\n        <div className={styles.hbox}>\n          <p className={styles.timer}>{formatTime(audioRef.current.currentTime)}</p>\n          <input\n            type=\"range\"\n            value={trackProgress}\n            step=\"1\"\n            min=\"0\"\n            max={duration ? duration : `${duration}`}\n            className={styles.progress}\n            onChange={(e) => onScrub(e.target.value)}\n            onMouseUp={onScrubEnd}\n            onKeyUp={onScrubEnd}\n            style={{ background: trackStyling }}\n          />\n          <p className={styles.timer}>{formatTime(duration)}</p>\n        </div>\n      </div>\n      <Backdrop\n        trackIndex={trackIndex}\n        activeColor={color}\n        isPlaying={isPlaying}\n      />\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n\n\n\n// const toNextTrack = useCallback(() => {\n  //   if (trackIndex < tracks.length - 1) {\n  //       setTrackIndex(trackIndex + 1);\n  //     } else {\n  //       setTrackIndex(0);\n  //     }\n  // }, [trackIndex, tracks.length]);\n\n\n  // const toPrevTrack = () => {\n  //   if (trackIndex - 1 < 0) {\n  //     setTrackIndex(tracks.length - 1);\n  //   } else {\n  //     setTrackIndex(trackIndex - 1);\n  //   }\n  // };","/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/backdrop.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/footer.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/hamburger.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/header.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/letter.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/components/subtitle.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/error.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/layout.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/not-found.tsx",[],[],"/Users/oliviahu/Documents/github/AgoraFrontend/src/app/page.tsx",[],[],{"ruleId":"99","severity":1,"message":"100","line":102,"column":16,"nodeType":"101","endLine":102,"endColumn":23},"react-hooks/exhaustive-deps","The ref value 'audioRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'audioRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier"]